Select * from HOL_DB1.RETAIL.RETAILER_SALES limit 10000;


-- Remove duplicate rows based on SALES_ID
DELETE FROM HOL_DB1.RETAIL.RETAILER_SALES
WHERE SALES_ID NOT IN (
    SELECT MIN(SALES_ID)
    FROM HOL_DB1.RETAIL.RETAILER_SALES
    GROUP BY SALES_ID
);






-- Add a new column SCALED_SALES_AMOUNT
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN SCALED_SALES_AMOUNT FLOAT;

-- Determine the min and max values for SALES_AMOUNT
SELECT MIN(SALES_AMOUNT) AS MIN_SALES_AMOUNT,
       MAX(SALES_AMOUNT) AS MAX_SALES_AMOUNT
FROM HOL_DB1.RETAIL.RETAILER_SALES;

-- Update the new column with scaled values
-- Scale SALES_AMOUNT to the range [0, 1] and store in the existing column SCALED_SALES_AMOUNT
UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET SCALED_SALES_AMOUNT = (SALES_AMOUNT - (SELECT MIN_SALES_AMOUNT FROM (SELECT MIN(SALES_AMOUNT) AS MIN_SALES_AMOUNT FROM HOL_DB1.RETAIL.RETAILER_SALES)))
                         / (SELECT MAX_SALES_AMOUNT FROM (SELECT MAX(SALES_AMOUNT) AS MAX_SALES_AMOUNT FROM HOL_DB1.RETAIL.RETAILER_SALES));







-- Create a new column TOTAL_SALES for each store
-- Add a new column TOTAL_SALES
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN TOTAL_SALES FLOAT;

-- Update the new column with the total sales for each store
UPDATE HOL_DB1.RETAIL.RETAILER_SALES t1
SET TOTAL_SALES = (
    SELECT SUM(t2.SALES_AMOUNT)
    FROM HOL_DB1.RETAIL.RETAILER_SALES t2
    WHERE t1.STORE_ID = t2.STORE_ID
);








-- Calculate mean and standard deviation of sales amount
SELECT AVG(SALES_AMOUNT) AS MEAN_SALES_AMOUNT,
       STDDEV(SALES_AMOUNT) AS STDDEV_SALES_AMOUNT
FROM HOL_DB1.RETAIL.RETAILER_SALES;









-- Identify outliers based on sales amount
SELECT *
FROM HOL_DB1.RETAIL.RETAILER_SALES
WHERE SALES_AMOUNT > (SELECT MEAN_SALES_AMOUNT + 2 * STDDEV_SALES_AMOUNT
                     FROM (SELECT AVG(SALES_AMOUNT) AS MEAN_SALES_AMOUNT,
                                  STDDEV(SALES_AMOUNT) AS STDDEV_SALES_AMOUNT
                           FROM HOL_DB1.RETAIL.RETAILER_SALES));







-- Add a new column HIGH_SALES_FLAG (1 for high sales, 0 otherwise)
-- Add a new column HIGH_SALES_FLAG (1 for high sales, 0 otherwise)
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN HIGH_SALES_FLAG INT;

UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET HIGH_SALES_FLAG = CASE WHEN SALES_AMOUNT > (SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY SALES_AMOUNT) FROM HOL_DB1.RETAIL.RETAILER_SALES)
                          THEN 1
                          ELSE 0
                     END;






-- Add a new column SALES_PER_UNIT for each product
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN SALES_PER_UNIT FLOAT;

UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET SALES_PER_UNIT = SALES_AMOUNT / SALES_QUANTITY
WHERE SALES_QUANTITY <> 0;







-- Add a new column DAY_OF_WEEK
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN DAY_OF_WEEK INT;

UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET DAY_OF_WEEK = DAYOFWEEK(DATE_KEY);








-- Add a new column STORE_LOCATION
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN STORE_LOCATION VARCHAR(50);

UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET STORE_LOCATION = STORE_CITY || ', ' || STORE_STATE;







-- Add a new column SALES_PER_UNIT_1
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN SALES_PER_UNIT_1 FLOAT;

-- Update the values based on the condition
UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET SALES_PER_UNIT_1 = CASE 
                        WHEN SALES_QUANTITY <> 0 
                        THEN SALES_AMOUNT / SALES_QUANTITY 
                        ELSE NULL 
                    END;







-- Add a new column SEASON
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN SEASON VARCHAR(20);

-- Update SEASON based on the month extracted from DATE_KEY
UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET SEASON = CASE
    WHEN EXTRACT(MONTH FROM DATE_KEY) IN (12, 1, 2) THEN 'Winter'
    WHEN EXTRACT(MONTH FROM DATE_KEY) IN (3, 4, 5) THEN 'Spring'
    WHEN EXTRACT(MONTH FROM DATE_KEY) IN (6, 7, 8) THEN 'Summer'
    WHEN EXTRACT(MONTH FROM DATE_KEY) IN (9, 10, 11) THEN 'Fall'
    ELSE 'Unknown'
END;







-- Add a new column COMPOSITE_KEY
ALTER TABLE HOL_DB1.RETAIL.RETAILER_SALES
ADD COLUMN COMPOSITE_KEY VARCHAR(50);

UPDATE HOL_DB1.RETAIL.RETAILER_SALES
SET COMPOSITE_KEY = CONCAT(STORE_ID, '_', PRODUCT_ID);







-- Replace NULL values with 0 for all columns in HOL_DB1.RETAIL.RETAILER_SALES
-- UPDATE HOL_DB1.RETAIL.RETAILER_SALES
-- SET DAYS_SINCE_SALE = IFNULL(DAYS_SINCE_SALE, 0);


-- UPDATE HOL_DB1.RETAIL.RETAILER_SALES
-- SET SALES_PER_UNIT = IFNULL(SALES_PER_UNIT, 0);









































